{"componentChunkName":"component---src-templates-notebook-index-js","path":"/计算机与编程/JavaScript/FAQs/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"如何监听-dom-的更新？\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"\\u5982\\u4F55\\u76D1\\u542C DOM \\u7684\\u66F4\\u65B0\\uFF1F\", mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC-dom-%E7%9A%84%E6%9B%B4%E6%96%B0%EF%BC%9F\",\n    \"aria-label\": \"如何监听 dom 的更新？ permalink\",\n    \"className\": \"autolink-header-icon after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"\\u4F7F\\u7528 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MutationObserver\"), \" \\u76D1\\u542C\\u3002\"), mdx(\"p\", null, \"\\u8BE6\\u60C5\\u67E5\\u9605 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }), \"MDN: MutationObserver\")), mdx(\"p\", null, \"\\u793A\\u4F8B\\uFF1A\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Select the node that will be observed for mutations\\nvar targetNode = document.getElementById('some-id');\\n\\n// Options for the observer (which mutations to observe)\\nvar config = { attributes: true, childList: true, subtree: true };\\n\\n// Callback function to execute when mutations are observed\\nvar callback = function(mutationsList) {\\n    for(var mutation of mutationsList) {\\n        if (mutation.type == 'childList') {\\n            console.log('A child node has been added or removed.');\\n        }\\n        else if (mutation.type == 'attributes') {\\n            console.log('The ' + mutation.attributeName + ' attribute was modified.');\\n        }\\n    }\\n};\\n\\n// Create an observer instance linked to the callback function\\nvar observer = new MutationObserver(callback);\\n\\n// Start observing the target node for configured mutations\\nobserver.observe(targetNode, config);\\n\\n// Later, you can stop observing\\nobserver.disconnect();\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#如何监听-dom-的更新？","title":"如何监听 DOM 的更新？"}]}}},"pageContext":{"title":"FAQs"}}}
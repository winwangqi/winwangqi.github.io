{"componentChunkName":"component---src-templates-notebook-index-js","path":"/计算机与编程/Jenkins/demo/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jenkinsfile\"\n  }), \"node {\\n    def succ_file=[]\\n    def fail_file=[]\\n    def file_list\\n    def JKROOT=\\\"${WORKSPACE}/${target_project}\\\"\\n    def HJROOT=\\\"/home/wwwroot/xxxx/app/${target_project}\\\"\\n    def BAKPATH=\\\"${WORKSPACE}/rollback/${target_project}_${BUILD_NUMBER}\\\"\\n    def ori_version='xxxxx'\\n\\n    echo \\\"\\u76EE\\u6807\\u9879\\u76EE: ${target_project}\\\"\\n    echo \\\"\\u76EE\\u6807\\u7248\\u672C: ${target_version}\\\"\\n    echo \\\"\\u76EE\\u6807\\u670D\\u52A1\\u5668: ${target_server}\\\"\\n\\n    stage('\\u66F4\\u65B0\\u4EE3\\u7801') {\\n        if ( target_files =='' || target_files ==~ /\\\\s+|\\\\*+/ ){\\n            echo '\\u66F4\\u65B0\\u6587\\u4EF6\\u4E0D\\u80FD\\u4E3A\\u7A7A\\u6216*'\\n            return\\n        }\\n        if ( fileExists(\\\"${JKROOT}\\\") ){\\n            sh \\\"\\\"\\\"#!/bin/bash\\n                rm -fr ${JKROOT}\\n            \\\"\\\"\\\"\\n        }\\n        checkout([$class: 'SubversionSCM', \\n                additionalCredentials: [], \\n                excludedCommitMessages: '', \\n                excludedRegions: '', \\n                excludedRevprop: '', \\n                excludedUsers: '', \\n                filterChangelog: false, \\n                ignoreDirPropChanges: false, \\n                includedRegions: '', \\n                locations: [[\\n                            cancelProcessOnExternalsFail: true, \\n                            credentialsId: 'b6da4a4f-e51c-4955-9410-16b806783390', \\n                            depthOption: 'infinity', \\n                            ignoreExternalsOption: true, \\n                            local: \\\"${target_project}\\\", \\n                            remote: 'svn://svn.xxxxmall.com/xxxx/trunk/app/${target_project}'\\n                        ]], \\n                quietOperation: true, \\n                workspaceUpdater: [$class: 'UpdateUpdater']\\n        ])\\n    }    \\n    stage('\\u5BF9\\u6BD4\\u6587\\u4EF6') {\\n        file_list = target_files.split(\\\"\\\\\\\\s*\\\\\\\\r?\\\\\\\\n\\\\\\\\s*\\\")\\n\\n        if ( !fileExists(\\\"${HJROOT}\\\") ) {\\n            echo \\\"${HJROOT} \\u4E0D\\u5B58\\u5728.\\\\n\\u4E0D\\u652F\\u6301\\u65B0\\u53D1\\u9879\\u76EE\\\"\\n            return\\n        }\\n        if ( target_version != ori_version ){\\n            sh \\\"\\\"\\\"#!/bin/bash\\n            echo \\\"\\u5207\\u6362\\u7248\\u672C ${ori_version}->${target_version}\\\"\\n            mv -v ${JKROOT}/${ori_version} ${JKROOT}/${target_version} \\n            \\\"\\\"\\\"\\n        }\\n        file_list.each{\\n            if ( it.length()<3 ){\\n                echo \\\"\\u786E\\u5B9A\\u66F4\\u65B0 ${it} ??? \\u8FD9\\u4E0D\\u662F\\u4E2A\\u6587\\u4EF6\\u5427?\\\"\\n                return\\n            }\\n            if ( !fileExists(\\\"${JKROOT}/${it}\\\") ){\\n                echo \\\"${JKROOT}/${it} \\u4E0D\\u5B58\\u5728, \\u68C0\\u67E5\\u586B\\u5199\\u662F\\u5426\\u6B63\\u786E\\\"\\n                return\\n            }\\n            if (fileExists(\\\"${HJROOT}/${it}\\\") ) {\\n                succ_file.add(it)\\n            }else{\\n                fail_file.add(it)\\n            }\\n        }\\n\\n    }\\n    stage(\\\"\\u9884\\u5904\\u7406\\u6587\\u4EF6\\\") {\\n        echo succ_file.join('|')\\n        echo fail_file.join('|')\\n        if (fail_file.size()>0){\\n            echo \\\"\\u6587\\u4EF6 ${fail_file.join(' ')} \\u662F\\u65B0\\u53D1\\u6587\\u4EF6\\u5417?\\\"\\n            input '\\u786E\\u5B9A\\u65B0\\u53D1\\u4EE5\\u7EE7\\u7EED'\\n            fail_file.each {\\n                sh \\\"\\\"\\\"#!/bin/bash\\n                cd ${JKROOT} && rsync -azRh --exclude='.svn' --exclude='*.log' ${it} ${HJROOT}/\\n                \\\"\\\"\\\"\\n            }\\n            echo '\\u65B0\\u53D1\\u6587\\u4EF6\\u5904\\u7406\\u5B8C\\u6210'\\n        }\\n        if (succ_file.size()>0){\\n            succ_file.each {\\n                echo \\\"${JKROOT}/${it}\\\"\\n                echo \\\"${HJROOT}/${it}\\\"\\n                sh (script:\\\"\\\"\\\"#!/bin/bash\\n                diff -u ${JKROOT}/${it} ${HJROOT}/${it} || echo true\\n                \\\"\\\"\\\")\\n            }\\n            echo '\\u67E5\\u770B\\u5BF9\\u6BD4\\u8BB0\\u5F55,\\u786E\\u8BA4\\u6587\\u4EF6\\u662F\\u5426\\u6B63\\u786E'\\n            input '\\u786E\\u8BA4\\u4FEE\\u6539\\u6587\\u4EF6\\u6B63\\u786E?'\\n            sh \\\"mkdir -p ${BAKPATH}/old && mkdir -p ${BAKPATH}/new\\\"\\n\\n            succ_file.each {\\n                sh \\\"\\\"\\\"#!/bin/bash    \\n                cd ${HJROOT} && rsync -azRh --exclude='.svn' --exclude='*.log' ${it} ${BAKPATH}/old/\\n                cd ${JKROOT} && rsync -azRh --exclude='.svn' --exclude='*.log' ${it} ${HJROOT}/\\n                \\\"\\\"\\\"\\n                echo \\\"\\u66F4\\u65B0\\u6587\\u4EF6${it}\\u5904\\u7406\\u5B8C\\u6210\\\"\\n            }\\n        }\\n    }\\n    stage('\\u5206\\u53D1\\u670D\\u52A1\\u5668') {\\n        input '\\u662F\\u5426\\u8FDB\\u884C\\u5206\\u53D1?'\\n        server_list= target_server.tokenize(',')\\n        send_file = file_list.join(\\\" \\\")\\n        echo send_file\\n        server_list.each {\\n            echo \\\"\\u5206\\u53D1\\u5230${it}\\\"\\n            sh \\\"\\\"\\\"#!/bin/bash\\n            cd ${JKROOT} && rsync -azvR --exclude='.svn' --exclude='*.log' ${send_file} www@${it}:${HJROOT}/\\n            \\\"\\\"\\\"\\n        }\\n    }\\n    stage(\\\"\\u5907\\u4EFD\\u7248\\u672C\\\") {\\n        bak_file = file_list.join(\\\" \\\")\\n        sh \\\"\\\"\\\"#!/bin/bash\\n            mkdir -p ${BAKPATH}/new && cd ${HJROOT} && rsync -azvR --exclude='.svn' --exclude='*.log' ${bak_file} ${BAKPATH}/new/\\n            rm -fr ${JKROOT}\\n        \\\"\\\"\\\"\\n    }\\n}node {\\n    def succ_file=[]\\n    def fail_file=[]\\n    def file_list\\n    def JKROOT=\\\"${WORKSPACE}/${target_project}\\\"\\n    def HJROOT=\\\"/home/wwwroot/xxxx/app/${target_project}\\\"\\n    def BAKPATH=\\\"${WORKSPACE}/rollback/${target_project}_${BUILD_NUMBER}\\\"\\n    def ori_version='2015041703'\\n\\n    echo \\\"\\u76EE\\u6807\\u9879\\u76EE: ${target_project}\\\"\\n    echo \\\"\\u76EE\\u6807\\u7248\\u672C: ${target_version}\\\"\\n    echo \\\"\\u76EE\\u6807\\u670D\\u52A1\\u5668: ${target_server}\\\"\\n\\n    stage('\\u66F4\\u65B0\\u4EE3\\u7801') {\\n        if ( target_files =='' || target_files ==~ /\\\\s+|\\\\*+/ ){\\n            echo '\\u66F4\\u65B0\\u6587\\u4EF6\\u4E0D\\u80FD\\u4E3A\\u7A7A\\u6216*'\\n            return\\n        }\\n        if ( fileExists(\\\"${JKROOT}\\\") ){\\n            sh \\\"\\\"\\\"#!/bin/bash\\n                rm -fr ${JKROOT}\\n            \\\"\\\"\\\"\\n        }\\n        checkout([$class: 'SubversionSCM', \\n                additionalCredentials: [], \\n                excludedCommitMessages: '', \\n                excludedRegions: '', \\n                excludedRevprop: '', \\n                excludedUsers: '', \\n                filterChangelog: false, \\n                ignoreDirPropChanges: false, \\n                includedRegions: '', \\n                locations: [[\\n                            cancelProcessOnExternalsFail: true, \\n                            credentialsId: 'b6da4a4f-e51c-4955-9410-16b806783390', \\n                            depthOption: 'infinity', \\n                            ignoreExternalsOption: true, \\n                            local: \\\"${target_project}\\\", \\n                            remote: 'svn://svn.xxxxmall.com/xxxx/trunk/app/${target_project}'\\n                        ]], \\n                quietOperation: true, \\n                workspaceUpdater: [$class: 'UpdateUpdater']\\n        ])\\n    }    \\n    stage('\\u5BF9\\u6BD4\\u6587\\u4EF6') {\\n        file_list = target_files.split(\\\"\\\\\\\\s*\\\\\\\\r?\\\\\\\\n\\\\\\\\s*\\\")\\n\\n        if ( !fileExists(\\\"${HJROOT}\\\") ) {\\n            echo \\\"${HJROOT} \\u4E0D\\u5B58\\u5728.\\\\n\\u4E0D\\u652F\\u6301\\u65B0\\u53D1\\u9879\\u76EE\\\"\\n            return\\n        }\\n        if ( target_version != ori_version ){\\n            sh \\\"\\\"\\\"#!/bin/bash\\n            echo \\\"\\u5207\\u6362\\u7248\\u672C ${ori_version}->${target_version}\\\"\\n            mv -v ${JKROOT}/${ori_version} ${JKROOT}/${target_version} \\n            \\\"\\\"\\\"\\n        }\\n        file_list.each{\\n            if ( it.length()<3 ){\\n                echo \\\"\\u786E\\u5B9A\\u66F4\\u65B0 ${it} ??? \\u8FD9\\u4E0D\\u662F\\u4E2A\\u6587\\u4EF6\\u5427?\\\"\\n                return\\n            }\\n            if ( !fileExists(\\\"${JKROOT}/${it}\\\") ){\\n                echo \\\"${JKROOT}/${it} \\u4E0D\\u5B58\\u5728, \\u68C0\\u67E5\\u586B\\u5199\\u662F\\u5426\\u6B63\\u786E\\\"\\n                return\\n            }\\n            if (fileExists(\\\"${HJROOT}/${it}\\\") ) {\\n                succ_file.add(it)\\n            }else{\\n                fail_file.add(it)\\n            }\\n        }\\n\\n    }\\n    stage(\\\"\\u9884\\u5904\\u7406\\u6587\\u4EF6\\\") {\\n        echo succ_file.join('|')\\n        echo fail_file.join('|')\\n        if (fail_file.size()>0){\\n            echo \\\"\\u6587\\u4EF6 ${fail_file.join(' ')} \\u662F\\u65B0\\u53D1\\u6587\\u4EF6\\u5417?\\\"\\n            input '\\u786E\\u5B9A\\u65B0\\u53D1\\u4EE5\\u7EE7\\u7EED'\\n            fail_file.each {\\n                sh \\\"\\\"\\\"#!/bin/bash\\n                cd ${JKROOT} && rsync -azRh --exclude='.svn' --exclude='*.log' ${it} ${HJROOT}/\\n                \\\"\\\"\\\"\\n            }\\n            echo '\\u65B0\\u53D1\\u6587\\u4EF6\\u5904\\u7406\\u5B8C\\u6210'\\n        }\\n        if (succ_file.size()>0){\\n            succ_file.each {\\n                echo \\\"${JKROOT}/${it}\\\"\\n                echo \\\"${HJROOT}/${it}\\\"\\n                sh (script:\\\"\\\"\\\"#!/bin/bash\\n                diff -u ${JKROOT}/${it} ${HJROOT}/${it} || echo true\\n                \\\"\\\"\\\")\\n            }\\n            echo '\\u67E5\\u770B\\u5BF9\\u6BD4\\u8BB0\\u5F55,\\u786E\\u8BA4\\u6587\\u4EF6\\u662F\\u5426\\u6B63\\u786E'\\n            input '\\u786E\\u8BA4\\u4FEE\\u6539\\u6587\\u4EF6\\u6B63\\u786E?'\\n            sh \\\"mkdir -p ${BAKPATH}/old && mkdir -p ${BAKPATH}/new\\\"\\n\\n            succ_file.each {\\n                sh \\\"\\\"\\\"#!/bin/bash    \\n                cd ${HJROOT} && rsync -azRh --exclude='.svn' --exclude='*.log' ${it} ${BAKPATH}/old/\\n                cd ${JKROOT} && rsync -azRh --exclude='.svn' --exclude='*.log' ${it} ${HJROOT}/\\n                \\\"\\\"\\\"\\n                echo \\\"\\u66F4\\u65B0\\u6587\\u4EF6${it}\\u5904\\u7406\\u5B8C\\u6210\\\"\\n            }\\n        }\\n    }\\n    stage('\\u5206\\u53D1\\u670D\\u52A1\\u5668') {\\n        input '\\u662F\\u5426\\u8FDB\\u884C\\u5206\\u53D1?'\\n        server_list= target_server.tokenize(',')\\n        send_file = file_list.join(\\\" \\\")\\n        echo send_file\\n        server_list.each {\\n            echo \\\"\\u5206\\u53D1\\u5230${it}\\\"\\n            sh \\\"\\\"\\\"#!/bin/bash\\n            cd ${JKROOT} && rsync -azvR --exclude='.svn' --exclude='*.log' ${send_file} www@${it}:${HJROOT}/\\n            \\\"\\\"\\\"\\n        }\\n    }\\n    stage(\\\"\\u5907\\u4EFD\\u7248\\u672C\\\") {\\n        bak_file = file_list.join(\\\" \\\")\\n        sh \\\"\\\"\\\"#!/bin/bash\\n            mkdir -p ${BAKPATH}/new && cd ${HJROOT} && rsync -azvR --exclude='.svn' --exclude='*.log' ${bak_file} ${BAKPATH}/new/\\n            rm -fr ${JKROOT}\\n        \\\"\\\"\\\"\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"fields":{"filePath":"/计算机与编程/Jenkins/demo.md"}}},"pageContext":{"title":"demo","modifiedTime":"2021-03-15 01:37"}},"staticQueryHashes":["63159454"]}
{"version":3,"sources":["webpack:///./src/components/Tree/Tree.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/TableOfContents/index.js","webpack:///./src/components/MarkdownPage/index.js","webpack:///./src/templates/notebook.js","webpack:///./content/sidebar.yml"],"names":["Tree","props","className","cns","styl","rootNode","createNode","node","createBranchNode","createLeaf","Array","isArray","map","item","Object","type","key","label","branch","isOpen","items","leaf","data","treeData","createTreeData","list","relativePath","context","path","keys","value","Sidebar","useState","sideBarIsOpen","setSideBarIsOpen","sidebar","open","content","to","title","toggleButton","onClick","tableOfContentsAST","length","tableOfContents","wrapper","href","index","children","id","markdownRemark","document","markdownPage","dangerouslySetInnerHTML","__html","html","TableOfContents","Notebook","pageContext","headingIDs","console","log","pageQuery","module","exports"],"mappings":"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","file":"component---src-templates-notebook-js-345338406f93cf883e4a.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport cns from 'classnames'\n\nimport styl from './Tree.module.scss'\n\n/*\n[\n  {\n    type: 'branchNode',\n    label: 'label'\n    isOpen: false,\n    items: [\n      {\n        type: 'leaf',\n        label: 'item1',\n      }\n    ]\n  }\n]\n */\n\nfunction createNode({ node, createBranchNode, createLeaf }) {\n  if (Array.isArray(node)) {\n    return node.map(item => createNode({ node: item, createBranchNode, createLeaf }))\n  }\n\n  if (node instanceof Object) {\n    if (node.type === 'branchNode') {\n      return (\n        <ul key={node.label} className={styl.branch}>\n          <div className={styl.label}>{createBranchNode ? createBranchNode(node) : node.label}</div>\n          {node.isOpen && <ul className={styl.branch}>{createNode({ node: node.items, createBranchNode, createLeaf })}</ul>}\n        </ul>\n      )\n    }\n\n    if (node.type === 'leaf') {\n      return <li key={node.label} className={styl.leaf}>{createLeaf ? createLeaf(node) : node.label}</li>\n    }\n  }\n\n  return null\n}\n\nTree.propTypes = {\n  createLeaf: PropTypes.func,\n}\n\nfunction Tree(props) {\n  return (\n    <div className={cns(styl.rootNode, props.className)}>\n      {createNode({\n        node: props.data,\n        createBranchNode: props.createBranchNode,\n        createLeaf: props.createLeaf\n      })}\n    </div>\n  )\n}\n\nexport default Tree\n","import React, { useState } from 'react'\nimport { Link } from 'gatsby'\n\nimport Tree from '../Tree'\n\nimport list from '../../../content/sidebar.yml'\n\nimport cns from 'classnames'\nimport styl from './index.module.scss'\n\nconst treeData = (function createTreeData(list, relativePath = '/') {\n  return list.map(item => {\n    if (typeof item === 'string') {\n      return {\n        type: 'leaf',\n        label: item,\n        context: {\n          path: relativePath + item,\n        },\n      }\n    } else if (item instanceof Object) {\n      const keys = Object.keys(item)\n      return keys.map(key => {\n        const value = item[key]\n        return {\n          type: 'branchNode',\n          label: key,\n          isOpen: true,\n          items: createTreeData(value, `${relativePath + key}/`)\n        }\n      })\n    }\n    return null\n  })\n})(list)\n\nexport default function Sidebar() {\n  const [sideBarIsOpen, setSideBarIsOpen] = useState(false)\n\n  function handleToggleSideBar() {\n    setSideBarIsOpen(!sideBarIsOpen)\n  }\n\n  return (\n    <>\n      <div\n        className={cns(\n          'theme-background',\n          'hidden-xs',\n          'hidden-sm',\n          styl.sidebar,\n          { [styl.open]: sideBarIsOpen }\n        )}\n      >\n        <div className={styl.content}>\n          <Tree\n            data={treeData}\n            createLeaf={node => <Link className=\"theme-color\" to={node.context.path} title={node.label}>{node.label}</Link>}\n          />\n        </div>\n      </div>\n\n      <div\n        className={cns(\n          'hidden-lg',\n          { 'theme-color': sideBarIsOpen },\n          styl.toggleButton\n        )}\n        onClick={handleToggleSideBar}\n      >\n        <i className=\"fa fa-align-right\" />\n      </div>\n    </>\n  )\n}\n","import React from 'react'\n\nimport Tree from '../Tree'\n\nimport cns from 'classnames'\nimport styl from './index.module.scss'\n\nexport default function(props) {\n  const { tableOfContentsAST } = props\n\n  if (tableOfContentsAST.length === 0) return null\n\n  return (\n    <div className={cns('hidden-xs', 'hidden-sm', styl.tableOfContents)}>\n      <div className={styl.wrapper}>\n        {/*<div className={styl.content} dangerouslySetInnerHTML={{ __html: tableOfContents }} />*/}\n        <Tree\n          className={styl.content}\n          data={createTreeData(tableOfContentsAST)}\n          createBranchNode={node => <a className=\"theme-color\" href={node.context.path}>{node.label}</a>}\n          createLeaf={node => <a className=\"theme-color\" href={node.context.path}>{node.label}</a>}\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction createTreeData(tableOfContentsAST) {\n  return tableOfContentsAST.map((item, index) => {\n    if (!item.children && index !== 0) {\n      return {\n        type: 'leaf',\n        label: item.value,\n        context: {\n          path: `#${item.id}`,\n        },\n      }\n    } else {\n      return {\n        type: 'branchNode',\n        label: item.value ? item.value : '',\n        isOpen: true,\n        items: createTreeData(item.children || []),\n        context: {\n          path: `#${item.id}`,\n        },\n      }\n    }\n  })\n}\n","import React from 'react'\n\nimport Sidebar from '../Sidebar'\nimport TableOfContents from '../TableOfContents'\nimport Theme from '../../components/theme'\n\nimport cns from 'classnames'\nimport './index.scss'\nimport styl from './index.module.scss'\n\nexport default function(props) {\n  const { title, markdownRemark, tableOfContentsAST, /* headingIDs */ } = props\n\n  document.title = title\n\n  return (\n    <Theme>\n      <div className={styl.markdownPage}>\n        <Sidebar />\n        <div className={cns('markdown', styl.content)}>\n          <div className={styl.title}>{title}</div>\n          <div dangerouslySetInnerHTML={{ __html: markdownRemark.html }} />\n        </div>\n        <TableOfContents tableOfContentsAST={tableOfContentsAST} />\n      </div>\n    </Theme>\n  )\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport MarkdownPage from 'components/MarkdownPage'\nexport default function Notebook({ data, pageContext: { title, headingIDs, tableOfContentsAST } }) {\n  const { markdownRemark } = data\n\n  console.log(title)\n\n  return (\n    <MarkdownPage\n      title={title}\n      markdownRemark={markdownRemark}\n      headingIDs={headingIDs}\n      tableOfContentsAST={tableOfContentsAST}\n    />\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(fields: { slug: { eq: $path } }) {\n      html\n      tableOfContents (\n        pathToSlugField: \"fields.slug\"\n        heading: null\n        maxDepth: 4\n      )\n    }\n  }\n`\n","module.exports = [{\"Test\":[\"test\"]},\"读书笔记\",\"生活感悟与人生格言\",{\"Notebook\":[\"功能需求\",\"技术选型\"]},{\"DynamoDB\":[\"CreateTable\",\"FAQs\"]},{\"English\":[{\"Music\":[\"Lession1 Talking about music you like\",\"Lession2 Finding ways to listen to music\"]}]},{\"Golang\":[\"介绍\",\"快速上手\",{\"核心概念\":[\"接口\"]},\"学习资源\",\"生态系统\",\"FAQs\"]},{\"微信开发\":[\"获取用户头像模糊不清晰\"]},{\"Linux\":[{\"Command\":[\"chsh\"]},\"用户管理\"]},{\"Writing\":[{\"如何书写技术文档\":[\"介绍\",\"文档体系\",\"参考资料\"]}]},\"For test 404\"]"],"sourceRoot":""}